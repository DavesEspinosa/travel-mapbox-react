{"version":3,"sources":["API.js","LogEntryForm.js","App.js","index.js"],"names":["listLogEntries","a","fetch","process","response","json","createLogEntry","entry","method","headers","body","JSON","stringify","LogEntryForm","location","onClose","useState","loading","setLoading","error","setError","useForm","register","handleSubmit","onSubmit","data","latitude","longitude","console","message","className","htmlFor","type","name","required","ref","rows","disabled","App","logEntries","setLogEntries","showPopup","setShowPopup","addEntryLocation","setAddEntryLocation","width","height","zoom","viewport","setViewport","getEntries","useEffect","mapStyle","mapboxApiAccessToken","onViewportChange","onDblClick","event","lngLat","map","Fragment","key","_id","onClick","style","src","alt","closeButton","closeOnClick","dynamicPosition","anchor","title","comments","image","Date","visitDate","toLocaleDateString","version","id","x","y","viewBox","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3354e316.chunk.js","sourcesContent":["\n\nexport async function listLogEntries() {\n  const response = await fetch(`${process.env.REACT_APP_API_URL}/api/logs`);\n  return response.json();\n}\n\nexport async function createLogEntry(entry) {\n  const response = await fetch(`${process.env.REACT_APP_API_URL}/api/logs`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify(entry),\n  });\n  return response.json();\n}\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { createLogEntry } from \"./API\";\n\nfunction LogEntryForm({ location, onClose }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true);\n      data.latitude = location.latitude;\n      data.longitude = location.longitude;\n      await createLogEntry(data);\n      onClose();\n    } catch (error) {\n      console.error(error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"entry-form\">\n      {error ? <h3 className=\"error\">{error}</h3> : null}\n      <label htmlFor=\"apiKey\">API KEY</label>\n      <input type=\"password\" name=\"apiKey\" required ref={register} />\n      <label htmlFor=\"title\">Title</label>\n      <input name=\"title\" required ref={register} />\n      <label htmlFor=\"comments\">Comments</label>\n      <textarea name=\"comments\" rows={3} ref={register}></textarea>\n      <label htmlFor=\"description\">Description</label>\n      <textarea name=\"description\" rows={3} ref={register}></textarea>\n      <label htmlFor=\"image\">Image</label>\n      <input name=\"image\" ref={register} />\n      <label htmlFor=\"visitDate\">Visit Date</label>\n      <input name=\"visitDate\" type=\"date\" required ref={register} />\n      <button disabled={loading}>\n        {loading ? \"Loading...\" : \"Create Entry\"}\n      </button>\n    </form>\n  );\n}\n\nexport default LogEntryForm;\n","import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport { listLogEntries } from \"./API\";\nimport LogEntryForm from \"./LogEntryForm\";\n\nconst App = () => {\n  const [logEntries, setLogEntries] = useState([]);\n  const [showPopup, setShowPopup] = useState({});\n  const [addEntryLocation, setAddEntryLocation] = useState(null);\n  const [viewport, setViewport] = useState({\n    width: \"100vw\",\n    height: \"100vh\",\n    latitude: 37.6,\n    longitude: -95.665,\n    zoom: 3,\n  });\n\n  const getEntries = async () => {\n    const logEntries = await listLogEntries();\n    setLogEntries(logEntries);\n  };\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n\n  const showAddMarkerPopup = (event) => {\n    const [longitude, latitude] = event.lngLat;\n\n    setAddEntryLocation({\n      latitude,\n      longitude,\n    });\n  };\n\n  return (\n    <ReactMapGL\n      {...viewport}\n      mapStyle=\"mapbox://styles/espi/ckflb2v636wqv19mr4nlbohyf\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      onViewportChange={setViewport}\n      onDblClick={showAddMarkerPopup}\n    >\n      {logEntries.map((entry) => (\n        <React.Fragment key={entry._id}>\n          <Marker latitude={entry.latitude} longitude={entry.longitude}>\n            <div\n              onClick={() =>\n                setShowPopup({\n                   //...showPopup,\n                  [entry._id]: true,\n                })\n              }\n            >\n              <img\n                className=\"marker yellow\"\n                style={{\n                  height: `${5 * viewport.zoom}px`,\n                  width: `${5 * viewport.zoom}px`,\n                }}\n                src=\"https://i.imgur.com/y0G5YTX.png\"\n                alt=\"marker\"\n              />\n            </div>\n          </Marker>\n          {showPopup[entry._id] ? (\n            <Popup\n              latitude={entry.latitude}\n              longitude={entry.longitude}\n              closeButton={true}\n              closeOnClick={false}\n              dynamicPosition={true}\n              onClose={() => setShowPopup({})}\n              anchor=\"top\"\n            >\n              <div className=\"popup\">\n                <h3>{entry.title}</h3>\n                <p>{entry.comments}</p>\n                {entry.image && <img src={entry.image} alt={entry.title}/>}\n                <small>\n                  Visited on: {new Date(entry.visitDate).toLocaleDateString()}\n                </small>\n              </div>\n            </Popup>\n          ) : null}\n        </React.Fragment>\n      ))}\n      {addEntryLocation ? (\n        <>\n          <Marker\n            latitude={addEntryLocation.latitude}\n            longitude={addEntryLocation.longitude}\n          >\n            <div>\n              <svg\n                className=\"marker red\"\n                style={{\n                  height: `${6 * viewport.zoom}px`,\n                  width: `${6 * viewport.zoom}px`,\n                }}\n                version=\"1.1\"\n                id=\"Layer_1\"\n                x=\"0px\"\n                y=\"0px\"\n                viewBox=\"0 0 512 512\"\n              >\n                <g>\n                  <g>\n                    <path\n                      d=\"M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035\n                      c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719\n                      c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z\"\n                    />\n                  </g>\n                </g>\n              </svg>\n            </div>\n          </Marker>\n          <Popup\n            latitude={addEntryLocation.latitude}\n            longitude={addEntryLocation.longitude}\n            closeButton={true}\n            closeOnClick={false}\n            dynamicPosition={true}\n            onClose={() => setAddEntryLocation(null)}\n            anchor=\"top\"\n          >\n            <div className=\"popup\">\n              <LogEntryForm\n                onClose={() => {\n                  setAddEntryLocation(null);\n                  getEntries();\n                }}\n                location={addEntryLocation}\n              />\n            </div>\n          </Popup>\n        </>\n      ) : null}\n    </ReactMapGL>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}